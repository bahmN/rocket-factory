// Code generated by ogen, DO NOT EDIT.

package order_v1

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// CancelOrderConflict is response for CancelOrder operation.
type CancelOrderConflict struct{}

func (*CancelOrderConflict) cancelOrderRes() {}

// CancelOrderInternalServerError is response for CancelOrder operation.
type CancelOrderInternalServerError struct{}

func (*CancelOrderInternalServerError) cancelOrderRes() {}

// CancelOrderNoContent is response for CancelOrder operation.
type CancelOrderNoContent struct{}

func (*CancelOrderNoContent) cancelOrderRes() {}

// CancelOrderNotFound is response for CancelOrder operation.
type CancelOrderNotFound struct{}

func (*CancelOrderNotFound) cancelOrderRes() {}

// Ref: #/components/schemas/create_order_request
type CreateOrderRequest struct {
	// UUID пользователя.
	UserUUID string `json:"user_uuid"`
	// Список UUID деталей.
	PartsUUID []jx.Raw `json:"parts_uuid"`
}

// GetUserUUID returns the value of UserUUID.
func (s *CreateOrderRequest) GetUserUUID() string {
	return s.UserUUID
}

// GetPartsUUID returns the value of PartsUUID.
func (s *CreateOrderRequest) GetPartsUUID() []jx.Raw {
	return s.PartsUUID
}

// SetUserUUID sets the value of UserUUID.
func (s *CreateOrderRequest) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetPartsUUID sets the value of PartsUUID.
func (s *CreateOrderRequest) SetPartsUUID(val []jx.Raw) {
	s.PartsUUID = val
}

// Ref: #/components/schemas/create_order_response
type CreateOrderResponse struct {
	// Уникальный идентификатор заказа.
	OrderUUID string `json:"order_uuid"`
	// Итоговая стоимость.
	TotalPrice float64 `json:"total_price"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *CreateOrderResponse) GetOrderUUID() string {
	return s.OrderUUID
}

// GetTotalPrice returns the value of TotalPrice.
func (s *CreateOrderResponse) GetTotalPrice() float64 {
	return s.TotalPrice
}

// SetOrderUUID sets the value of OrderUUID.
func (s *CreateOrderResponse) SetOrderUUID(val string) {
	s.OrderUUID = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *CreateOrderResponse) SetTotalPrice(val float64) {
	s.TotalPrice = val
}

func (*CreateOrderResponse) createOrderRes() {}

// Ref: #/components/schemas/internal_server_error
type InternalServerError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServerError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServerError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServerError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServerError) SetMessage(val string) {
	s.Message = val
}

func (*InternalServerError) createOrderRes() {}
func (*InternalServerError) getOrderRes()    {}
func (*InternalServerError) payOrderRes()    {}

// Ref: #/components/schemas/not_found_error
type NotFoundError struct {
	// HTTP-код ошибка.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundError) SetMessage(val string) {
	s.Message = val
}

func (*NotFoundError) createOrderRes() {}
func (*NotFoundError) getOrderRes()    {}
func (*NotFoundError) payOrderRes()    {}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/order
type Order struct {
	// Уникальный идентификатор заказа.
	OrderUUID string `json:"order_uuid"`
	// UUID пользователя.
	UserUUID string `json:"user_uuid"`
	// Список UUID деталей.
	PartUuids []jx.Raw `json:"part_uuids"`
	// Итоговая стоимость.
	TotalPrice float64 `json:"total_price"`
	// UUID транзакции.
	TransactionUUID OptString `json:"transaction_uuid"`
	// Способ оплаты.
	PaymentMethod OptString     `json:"payment_method"`
	Status        PaymentMethod `json:"status"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *Order) GetOrderUUID() string {
	return s.OrderUUID
}

// GetUserUUID returns the value of UserUUID.
func (s *Order) GetUserUUID() string {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *Order) GetPartUuids() []jx.Raw {
	return s.PartUuids
}

// GetTotalPrice returns the value of TotalPrice.
func (s *Order) GetTotalPrice() float64 {
	return s.TotalPrice
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *Order) GetTransactionUUID() OptString {
	return s.TransactionUUID
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *Order) GetPaymentMethod() OptString {
	return s.PaymentMethod
}

// GetStatus returns the value of Status.
func (s *Order) GetStatus() PaymentMethod {
	return s.Status
}

// SetOrderUUID sets the value of OrderUUID.
func (s *Order) SetOrderUUID(val string) {
	s.OrderUUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *Order) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *Order) SetPartUuids(val []jx.Raw) {
	s.PartUuids = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *Order) SetTotalPrice(val float64) {
	s.TotalPrice = val
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *Order) SetTransactionUUID(val OptString) {
	s.TransactionUUID = val
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *Order) SetPaymentMethod(val OptString) {
	s.PaymentMethod = val
}

// SetStatus sets the value of Status.
func (s *Order) SetStatus(val PaymentMethod) {
	s.Status = val
}

func (*Order) getOrderRes() {}

// Статус.
// Ref: #/components/schemas/order_status
type OrderStatus string

const (
	OrderStatusPENDINGPAYMENT OrderStatus = "PENDING_PAYMENT"
	OrderStatusPAID           OrderStatus = "PAID"
	OrderStatusCANCELLED      OrderStatus = "CANCELLED"
)

// AllValues returns all OrderStatus values.
func (OrderStatus) AllValues() []OrderStatus {
	return []OrderStatus{
		OrderStatusPENDINGPAYMENT,
		OrderStatusPAID,
		OrderStatusCANCELLED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case OrderStatusPENDINGPAYMENT:
		return []byte(s), nil
	case OrderStatusPAID:
		return []byte(s), nil
	case OrderStatusCANCELLED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderStatus) UnmarshalText(data []byte) error {
	switch OrderStatus(data) {
	case OrderStatusPENDINGPAYMENT:
		*s = OrderStatusPENDINGPAYMENT
		return nil
	case OrderStatusPAID:
		*s = OrderStatusPAID
		return nil
	case OrderStatusCANCELLED:
		*s = OrderStatusCANCELLED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/pay_order_request
type PayOrderRequest struct {
	PaymentMethod OrderStatus `json:"payment_method"`
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *PayOrderRequest) GetPaymentMethod() OrderStatus {
	return s.PaymentMethod
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *PayOrderRequest) SetPaymentMethod(val OrderStatus) {
	s.PaymentMethod = val
}

// Ref: #/components/schemas/pay_order_response
type PayOrderResponse struct {
	// UUID транзакции.
	TransactionUUID string `json:"transaction_uuid"`
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *PayOrderResponse) GetTransactionUUID() string {
	return s.TransactionUUID
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *PayOrderResponse) SetTransactionUUID(val string) {
	s.TransactionUUID = val
}

func (*PayOrderResponse) payOrderRes() {}

// Способ оплаты.
// Ref: #/components/schemas/payment_method
type PaymentMethod string

const (
	PaymentMethodCARD          PaymentMethod = "CARD"
	PaymentMethodSBP           PaymentMethod = "SBP"
	PaymentMethodCREDITCARD    PaymentMethod = "CREDIT_CARD"
	PaymentMethodINVESTORMONEY PaymentMethod = "INVESTOR_MONEY"
)

// AllValues returns all PaymentMethod values.
func (PaymentMethod) AllValues() []PaymentMethod {
	return []PaymentMethod{
		PaymentMethodCARD,
		PaymentMethodSBP,
		PaymentMethodCREDITCARD,
		PaymentMethodINVESTORMONEY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCARD:
		return []byte(s), nil
	case PaymentMethodSBP:
		return []byte(s), nil
	case PaymentMethodCREDITCARD:
		return []byte(s), nil
	case PaymentMethodINVESTORMONEY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethod) UnmarshalText(data []byte) error {
	switch PaymentMethod(data) {
	case PaymentMethodCARD:
		*s = PaymentMethodCARD
		return nil
	case PaymentMethodSBP:
		*s = PaymentMethodSBP
		return nil
	case PaymentMethodCREDITCARD:
		*s = PaymentMethodCREDITCARD
		return nil
	case PaymentMethodINVESTORMONEY:
		*s = PaymentMethodINVESTORMONEY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
